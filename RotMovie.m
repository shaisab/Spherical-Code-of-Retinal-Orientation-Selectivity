function [] = RotMovie(Normal,C)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   This code generates a movie of how objects apear on the retina when the
%   head is rotated about a given axis. There are four plots in the movie.
%
%   1. Plot 1 is how the objects appear in the visible space of the eye.
%   2. Plot 2 is how the obects appear on the retina itself.
%   3. Plot 3 is how the objects appear on the flattened retina.
%   4. Plot 4 is the vector field on the retina generated by the optic
%   flow.
%
%   Inputs
%   1. SCC normal
%   2. OpAxis
%   3. C is the number of curves and must be less than or equal to 10.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

R=2;

%% Initial Data and Creation of Curves

%This part of the code creates the initial curves in the visual space about
%which rotations are taken.

n=1000; %Number of discretization points for the curve.
t=linspace(0,2*pi,n); %parametrization coordinates for the curve

%Computing alphabar, beta given the normal and the optical axis.
[alphabar,beta]=AB(Normal);

alphabar=alphabar+pi/3+pi;
beta=beta-deg2rad(90);



Normal=[cos(alphabar)*sin(beta),sin(alphabar)*sin(beta),-cos(beta)]';
CL=(pi-beta)/C;

%The curve given by the rotation if (alphabar,beta)=(0,0)
C1=[R*cos(t)*sin(CL);R*sin(t)*sin(CL);-R*cos(CL)*ones(1,n)];
C2=[R*cos(t)*sin(2*CL);R*sin(t)*sin(2*CL);-R*cos(2*CL)*ones(1,n)];
C3=[R*cos(t)*sin(3*CL);R*sin(t)*sin(3*CL);-R*cos(3*CL)*ones(1,n)];
C4=[R*cos(t)*sin(4*CL);R*sin(t)*sin(4*CL);-R*cos(4*CL)*ones(1,n)];
C5=[R*cos(t)*sin(5*CL);R*sin(t)*sin(5*CL);-R*cos(5*CL)*ones(1,n)];
C6=[R*cos(t)*sin(6*CL);R*sin(t)*sin(6*CL);-R*cos(6*CL)*ones(1,n)];
C7=[R*cos(t)*sin(7*CL);R*sin(t)*sin(7*CL);-R*cos(7*CL)*ones(1,n)];
C8=[R*cos(t)*sin(8*CL);R*sin(t)*sin(8*CL);-R*cos(8*CL)*ones(1,n)];
C9=[R*cos(t)*sin(9*CL);R*sin(t)*sin(9*CL);-R*cos(9*CL)*ones(1,n)];
C10=[R*cos(t)*sin(10*CL);R*sin(t)*sin(10*CL);-R*cos(10*CL)*ones(1,n)];
C11=[R*cos(t)*sin(11*CL);R*sin(t)*sin(11*CL);-R*cos(11*CL)*ones(1,n)];
C12=[R*cos(t)*sin(12*CL);R*sin(t)*sin(12*CL);-R*cos(12*CL)*ones(1,n)];
C13=[R*cos(t)*sin(13*CL);R*sin(t)*sin(13*CL);-R*cos(13*CL)*ones(1,n)];
C14=[R*cos(t)*sin(14*CL);R*sin(t)*sin(14*CL);-R*cos(14*CL)*ones(1,n)];
C15=[R*cos(t)*sin(15*CL);R*sin(t)*sin(15*CL);-R*cos(15*CL)*ones(1,n)];
C16=[R*cos(t)*sin(16*CL);R*sin(t)*sin(16*CL);-R*cos(16*CL)*ones(1,n)];
C17=[R*cos(t)*sin(17*CL);R*sin(t)*sin(17*CL);-R*cos(17*CL)*ones(1,n)];
C18=[R*cos(t)*sin(18*CL);R*sin(t)*sin(18*CL);-R*cos(18*CL)*ones(1,n)];
C19=[R*cos(t)*sin(19*CL);R*sin(t)*sin(19*CL);-R*cos(19*CL)*ones(1,n)];
C20=[R*cos(t)*sin(20*CL);R*sin(t)*sin(20*CL);-R*cos(20*CL)*ones(1,n)];

%Rotation matrices for rotating the curve to lie around the optical
%singularity.

Rot1=[cos(beta), 0, -sin(beta); 0, 1, 0; sin(beta), 0, cos(beta)];
Rot2=[cos(alphabar), -sin(alphabar), 0; sin(alphabar), cos(alphabar), 0; 0, 0, 1];

%Curve about the optical singularity.
C1=Rot2*Rot1*C1;
C2=Rot2*Rot1*C2;
C3=Rot2*Rot1*C3;
C4=Rot2*Rot1*C4;
C5=Rot2*Rot1*C5;
C6=Rot2*Rot1*C6;
C7=Rot2*Rot1*C7;
C8=Rot2*Rot1*C8;
C9=Rot2*Rot1*C9;
C10=Rot2*Rot1*C10;
C11=Rot2*Rot1*C11;
C12=Rot2*Rot1*C12;
C13=Rot2*Rot1*C13;
C14=Rot2*Rot1*C14;
C15=Rot2*Rot1*C15;
C16=Rot2*Rot1*C16;
C17=Rot2*Rot1*C17;
C18=Rot2*Rot1*C18;
C19=Rot2*Rot1*C19;
C20=Rot2*Rot1*C20;

%Curves on retina. We have to map the curve onto the retina by considering
%the optics of the system.
M=deg2rad(105);

sret1=-2*M/pi*acos(-C1(3,:)/R)+2*M;
thret1=atan2(C1(2,:),C1(1,:))+pi;
sret2=-2*M/pi*acos(-C2(3,:)/R)+2*M;
thret2=atan2(C2(2,:),C2(1,:))+pi;
sret3=-2*M/pi*acos(-C3(3,:)/R)+2*M;
thret3=atan2(C3(2,:),C3(1,:))+pi;
sret4=-2*M/pi*acos(-C4(3,:)/R)+2*M;
thret4=atan2(C4(2,:),C4(1,:))+pi;
sret5=-2*M/pi*acos(-C5(3,:)/R)+2*M;
thret5=atan2(C5(2,:),C5(1,:))+pi;
sret6=-2*M/pi*acos(-C6(3,:)/R)+2*M;
thret6=atan2(C6(2,:),C6(1,:))+pi;
sret7=-2*M/pi*acos(-C7(3,:)/R)+2*M;
thret7=atan2(C7(2,:),C7(1,:))+pi;
sret8=-2*M/pi*acos(-C8(3,:)/R)+2*M;
thret8=atan2(C8(2,:),C8(1,:))+pi;
sret9=-2*M/pi*acos(-C9(3,:)/R)+2*M;
thret9=atan2(C9(2,:),C9(1,:))+pi;
sret10=-2*M/pi*acos(-C10(3,:)/R)+2*M;
thret10=atan2(C10(2,:),C10(1,:))+pi;
sret11=-2*M/pi*acos(-C11(3,:)/R)+2*M;
thret11=atan2(C11(2,:),C11(1,:))+pi;
sret12=-2*M/pi*acos(-C12(3,:)/R)+2*M;
thret12=atan2(C12(2,:),C12(1,:))+pi;
sret13=-2*M/pi*acos(-C13(3,:)/R)+2*M;
thret13=atan2(C13(2,:),C13(1,:))+pi;
sret14=-2*M/pi*acos(-C14(3,:)/R)+2*M;
thret14=atan2(C14(2,:),C14(1,:))+pi;
sret15=-2*M/pi*acos(-C15(3,:)/R)+2*M;
thret15=atan2(C15(2,:),C15(1,:))+pi;
sret16=-2*M/pi*acos(-C16(3,:)/R)+2*M;
thret16=atan2(C16(2,:),C16(1,:))+pi;
sret17=-2*M/pi*acos(-C17(3,:)/R)+2*M;
thret17=atan2(C17(2,:),C17(1,:))+pi;
sret18=-2*M/pi*acos(-C18(3,:)/R)+2*M;
thret18=atan2(C18(2,:),C18(1,:))+pi;
sret19=-2*M/pi*acos(-C19(3,:)/R)+2*M;
thret19=atan2(C19(2,:),C19(1,:))+pi;
sret20=-2*M/pi*acos(-C20(3,:)/R)+2*M;
thret20=atan2(C20(2,:),C20(1,:))+pi;

C1ret(1,:)=cos(thret1).*sin(sret1);
C1ret(2,:)=sin(thret1).*sin(sret1);
C1ret(3,:)=-cos(sret1);
C2ret(1,:)=cos(thret2).*sin(sret2);
C2ret(2,:)=sin(thret2).*sin(sret2);
C2ret(3,:)=-cos(sret2);
C3ret(1,:)=cos(thret3).*sin(sret3);
C3ret(2,:)=sin(thret3).*sin(sret3);
C3ret(3,:)=-cos(sret3);
C4ret(1,:)=cos(thret4).*sin(sret4);
C4ret(2,:)=sin(thret4).*sin(sret4);
C4ret(3,:)=-cos(sret4);
C5ret(1,:)=cos(thret5).*sin(sret5);
C5ret(2,:)=sin(thret5).*sin(sret5);
C5ret(3,:)=-cos(sret5);
C6ret(1,:)=cos(thret6).*sin(sret6);
C6ret(2,:)=sin(thret6).*sin(sret6);
C6ret(3,:)=-cos(sret6);
C7ret(1,:)=cos(thret7).*sin(sret7);
C7ret(2,:)=sin(thret7).*sin(sret7);
C7ret(3,:)=-cos(sret7);
C8ret(1,:)=cos(thret8).*sin(sret8);
C8ret(2,:)=sin(thret8).*sin(sret8);
C8ret(3,:)=-cos(sret8);
C9ret(1,:)=cos(thret9).*sin(sret9);
C9ret(2,:)=sin(thret9).*sin(sret9);
C9ret(3,:)=-cos(sret9);
C10ret(1,:)=cos(thret10).*sin(sret10);
C10ret(2,:)=sin(thret10).*sin(sret10);
C10ret(3,:)=-cos(sret10);
C11ret(1,:)=cos(thret11).*sin(sret11);
C11ret(2,:)=sin(thret11).*sin(sret11);
C11ret(3,:)=-cos(sret11);
C12ret(1,:)=cos(thret12).*sin(sret12);
C12ret(2,:)=sin(thret12).*sin(sret12);
C12ret(3,:)=-cos(sret12);
C13ret(1,:)=cos(thret13).*sin(sret13);
C13ret(2,:)=sin(thret13).*sin(sret13);
C13ret(3,:)=-cos(sret13);
C14ret(1,:)=cos(thret14).*sin(sret14);
C14ret(2,:)=sin(thret14).*sin(sret14);
C14ret(3,:)=-cos(sret14);
C15ret(1,:)=cos(thret15).*sin(sret15);
C15ret(2,:)=sin(thret15).*sin(sret15);
C15ret(3,:)=-cos(sret15);
C16ret(1,:)=cos(thret16).*sin(sret16);
C16ret(2,:)=sin(thret16).*sin(sret16);
C16ret(3,:)=-cos(sret16);
C17ret(1,:)=cos(thret17).*sin(sret17);
C17ret(2,:)=sin(thret17).*sin(sret17);
C17ret(3,:)=-cos(sret17);
C18ret(1,:)=cos(thret18).*sin(sret18);
C18ret(2,:)=sin(thret18).*sin(sret18);
C18ret(3,:)=-cos(sret18);
C19ret(1,:)=cos(thret19).*sin(sret19);
C19ret(2,:)=sin(thret19).*sin(sret19);
C19ret(3,:)=-cos(sret19);
C20ret(1,:)=cos(thret20).*sin(sret20);
C20ret(2,:)=sin(thret20).*sin(sret20);
C20ret(3,:)=-cos(sret20);




axis([-1,1,-1,1,-1,1]);
%% Flattening Map data
%This part of the code computes all of the data needed for the flattening
%map.

phys=dlmread('phys');

M=phys(2); %This should be normalized to 1.

m1=phys(3);
m2=phys(4);
m3=phys(5);
m4=phys(6);

nu=phys(7);

a1=phys(8);
a2=phys(9);
a3=phys(10);
a4=phys(11);

ntemp=40;
%% Sector 1 data
% In this code we use the data from the flattened retina to create induce
% the vector field on the flattened retina.

s=linspace(0,M,ntemp+1);
s=linspace(s(2),M,ntemp);
th=linspace(a1,a2,ntemp);
[S,TH]=meshgrid(s,th);

%Construction of domain in visual optic space. This corresponds to the
%the coordinates on the hemisphere about the optical axis which the eye can
%see.

SV=-pi*R/(2*M)*S+pi*R;
THV=TH+pi;

%Calculation of the vector field of rotations in the coordinates svis and
%thvis. The variables (t,phi) denote geodesic polar coordinate around the axis of
%rotation.

t=zeros(n,n);
phi=zeros(n,n);
vecS=zeros(n,n);
vecTH=zeros(n,n);


%This loop constructs the components of the vector field of rotations
%in the visual space of the eye.  The function InverseSTH determines the
%coordinates of (t,phi) given coordiantes svis and thvis and is necessary to
%calculate the components of the vector field.

for i=1:ntemp
    for j=1:ntemp,
        [t(i,j),phi(i,j)]=InverseSTH(alphabar,beta,R,SV(i,j),THV(i,j));
        
        vecSV(i,j)=-cos(SV(i,j)/R)*cos(beta)*sin(phi(i,j))*cos(THV(i,j)-alphabar)+...
            cos(SV(i,j)/R)*cos(phi(i,j))*(sin(THV(i,j)-alphabar))-...
            sin(SV(i,j)/R)*sin(phi(i,j))*sin(beta);
        
        vecSV(i,j)=R*sin(t(i,j)/R)*vecSV(i,j);
        
        vecTHV(i,j)=(cos(beta)*sin(phi(i,j))*sin(THV(i,j)-alphabar)+...
            cos(phi(i,j))*cos(alphabar-THV(i,j)));
        
        vecTHV(i,j)=R*sin(t(i,j)/R)*vecTHV(i,j);
        vecTHV(i,j)=1/(R*sin(SV(i,j)/R))*vecTHV(i,j);
        
    end
end

%Conversion of the vector fields in visual space to vector fields on the
%retina.

vecS=-2*M/R*vecSV;
vecTH=vecTHV;

%We now push forward this vector onto the flattened retina.

StSec1Data=dlmread('StandardSector1_40');

StRHO=StSec1Data(1:ntemp,1:ntemp);
StF=StSec1Data(1:ntemp,ntemp+1:2*ntemp);
StS=StSec1Data(1:ntemp,2*ntemp+1:3*ntemp);
StTH=StSec1Data(1:ntemp,3*ntemp+1:4*ntemp);

StU=StRHO.*cos(StF);
StV=StRHO.*sin(StF);

%Calcution of derivatives
ds=StS(1,2)-StS(1,1);
DS=DiffX(ntemp)/ds;
StRHOS=(DS*StRHO')';
StFS=(DS*StF')';

dth=StTH(2,1)-StTH(1,1);
DTH=DiffX(ntemp)/dth;
StRHOTH=(DTH*StRHO);
StFTH=(DTH*StF);

StVecU=vecS.*(StRHOS.*cos(StF)-StRHO.*StFS.*sin(StF))+vecTH.*(StRHOTH.*cos(StF)-StRHO.*StFTH.*sin(StF));
StVecV=vecS.*(StRHOS.*sin(StF)+StRHO.*StFS.*cos(StF))+vecTH.*(StRHOTH.*sin(StF)+StRHO.*StFTH.*cos(StF));

figure(5);
hold on;
temp=(StVecU.^2+StVecV.^2).^(1/2);

StVecU=StVecU./temp;
StVecV=StVecV./temp;

S1=S;
TH1=TH;
StU1=StU;
StV1=StV;
StVecU1=StVecU;
StVecV1=StVecV;
%% Sector 2 data
% In this code we use the data from the flattened retina to create induce
% the vector field on the flattened retina.

s=linspace(0,M,ntemp+1);
s=linspace(s(2),M,ntemp);
th=linspace(a2,a3,ntemp);
[S,TH]=meshgrid(s,th);

%Construction of domain in visual optic space. This corresponds to the
%the coordinates on the hemisphere about the optical axis which the eye can
%see.

SV=-pi*R/(2*M)*S+pi*R;
THV=TH+pi;

%Calculation of the vector field of rotations in the coordinates svis and
%thvis. The variables (t,phi) denote geodesic polar coordinate around the axis of
%rotation.

t=zeros(n,n);
phi=zeros(n,n);
vecS=zeros(n,n);
vecTH=zeros(n,n);


%This loop constructs the components of the vector field of rotations
%in the visual space of the eye.  The function InverseSTH determines the
%coordinates of (t,phi) given coordiantes svis and thvis and is necessary to
%calculate the components of the vector field.

for i=1:ntemp
    for j=1:ntemp,
        [t(i,j),phi(i,j)]=InverseSTH(alphabar,beta,R,SV(i,j),THV(i,j));
        
        vecSV(i,j)=-cos(SV(i,j)/R)*cos(beta)*sin(phi(i,j))*cos(THV(i,j)-alphabar)+...
            cos(SV(i,j)/R)*cos(phi(i,j))*(sin(THV(i,j)-alphabar))-...
            sin(SV(i,j)/R)*sin(phi(i,j))*sin(beta);
        
        vecSV(i,j)=R*sin(t(i,j)/R)*vecSV(i,j);
        
        vecTHV(i,j)=(cos(beta)*sin(phi(i,j))*sin(THV(i,j)-alphabar)+...
            cos(phi(i,j))*cos(alphabar-THV(i,j)));
        
        vecTHV(i,j)=R*sin(t(i,j)/R)*vecTHV(i,j);
        vecTHV(i,j)=1/(R*sin(SV(i,j)/R))*vecTHV(i,j);
        
    end
end

%Conversion of the vector fields in visual space to vector fields on the
%retina.

vecS=-2*M/R*vecSV;
vecTH=vecTHV;

%We now push forward this vector onto the flattened retina.

StSec2Data=dlmread('StandardSector2_40');

StRHO=StSec2Data(1:ntemp,1:ntemp);
StF=StSec2Data(1:ntemp,ntemp+1:2*ntemp);
StS=StSec2Data(1:ntemp,2*ntemp+1:3*ntemp);
StTH=StSec2Data(1:ntemp,3*ntemp+1:4*ntemp);

StU=StRHO.*cos(StF);
StV=StRHO.*sin(StF);

%Calcution of derivatives
ds=StS(1,2)-StS(1,1);
DS=DiffX(ntemp)/ds;
StRHOS=(DS*StRHO')';
StFS=(DS*StF')';

dth=StTH(2,1)-StTH(1,1);
DTH=DiffX(ntemp)/dth;
StRHOTH=(DTH*StRHO);
StFTH=(DTH*StF);

StVecU=vecS.*(StRHOS.*cos(StF)-StRHO.*StFS.*sin(StF))+vecTH.*(StRHOTH.*cos(StF)-StRHO.*StFTH.*sin(StF));
StVecV=vecS.*(StRHOS.*sin(StF)+StRHO.*StFS.*cos(StF))+vecTH.*(StRHOTH.*sin(StF)+StRHO.*StFTH.*cos(StF));

temp=(StVecU.^2+StVecV.^2).^(1/2);

StVecU=StVecU./temp;
StVecV=StVecV./temp;

S2=S;
TH2=TH;
StU2=StU;
StV2=StV;
StVecU2=StVecU;
StVecV2=StVecV;
%% Sector 3 data
% In this code we use the data from the flattened retina to create induce
% the vector field on the flattened retina.

s=linspace(0,M,ntemp+1);
s=linspace(s(2),M,ntemp);
th=linspace(a3,a4,ntemp);
[S,TH]=meshgrid(s,th);

%Construction of domain in visual optic space. This corresponds to the
%the coordinates on the hemisphere about the optical axis which the eye can
%see.

SV=-pi*R/(2*M)*S+pi*R;
THV=TH+pi;

%Calculation of the vector field of rotations in the coordinates svis and
%thvis. The variables (t,phi) denote geodesic polar coordinate around the axis of
%rotation.

t=zeros(n,n);
phi=zeros(n,n);
vecS=zeros(n,n);
vecTH=zeros(n,n);


%This loop constructs the components of the vector field of rotations
%in the visual space of the eye.  The function InverseSTH determines the
%coordinates of (t,phi) given coordiantes svis and thvis and is necessary to
%calculate the components of the vector field.

for i=1:ntemp
    for j=1:ntemp,
        [t(i,j),phi(i,j)]=InverseSTH(alphabar,beta,R,SV(i,j),THV(i,j));
        
        vecSV(i,j)=-cos(SV(i,j)/R)*cos(beta)*sin(phi(i,j))*cos(THV(i,j)-alphabar)+...
            cos(SV(i,j)/R)*cos(phi(i,j))*(sin(THV(i,j)-alphabar))-...
            sin(SV(i,j)/R)*sin(phi(i,j))*sin(beta);
        
        vecSV(i,j)=R*sin(t(i,j)/R)*vecSV(i,j);
        
        vecTHV(i,j)=(cos(beta)*sin(phi(i,j))*sin(THV(i,j)-alphabar)+...
            cos(phi(i,j))*cos(alphabar-THV(i,j)));
        
        vecTHV(i,j)=R*sin(t(i,j)/R)*vecTHV(i,j);
        vecTHV(i,j)=1/(R*sin(SV(i,j)/R))*vecTHV(i,j);
        
    end
end

%Conversion of the vector fields in visual space to vector fields on the
%retina.

vecS=-2*M/R*vecSV;
vecTH=vecTHV;

%We now push forward this vector onto the flattened retina.

StSec3Data=dlmread('StandardSector3_40');

StRHO=StSec3Data(1:ntemp,1:ntemp);
StF=StSec3Data(1:ntemp,ntemp+1:2*ntemp);
StS=StSec3Data(1:ntemp,2*ntemp+1:3*ntemp);
StTH=StSec3Data(1:ntemp,3*ntemp+1:4*ntemp);

StU=StRHO.*cos(StF);
StV=StRHO.*sin(StF);

%Calcution of derivatives
ds=StS(1,2)-StS(1,1);
DS=DiffX(ntemp)/ds;
StRHOS=(DS*StRHO')';
StFS=(DS*StF')';

dth=StTH(2,1)-StTH(1,1);
DTH=DiffX(ntemp)/dth;
StRHOTH=(DTH*StRHO);
StFTH=(DTH*StF);

StVecU=vecS.*(StRHOS.*cos(StF)-StRHO.*StFS.*sin(StF))+vecTH.*(StRHOTH.*cos(StF)-StRHO.*StFTH.*sin(StF));
StVecV=vecS.*(StRHOS.*sin(StF)+StRHO.*StFS.*cos(StF))+vecTH.*(StRHOTH.*sin(StF)+StRHO.*StFTH.*cos(StF));

temp=(StVecU.^2+StVecV.^2).^(1/2);

StVecU=StVecU./temp;
StVecV=StVecV./temp;

S3=S;
TH3=TH;
StU3=StU;
StV3=StV;
StVecU3=StVecU;
StVecV3=StVecV;
%% Sector 4 data
% In this code we use the data from the flattened retina to create induce
% the vector field on the flattened retina.

s=linspace(0,M,ntemp+1);
s=linspace(s(2),M,ntemp);
th=linspace(a4,a1+2*pi,ntemp);
[S,TH]=meshgrid(s,th);

%Construction of domain in visual optic space. This corresponds to the
%the coordinates on the hemisphere about the optical axis which the eye can
%see.

SV=-pi*R/(2*M)*S+pi*R;
THV=TH+pi;

%Calculation of the vector field of rotations in the coordinates svis and
%thvis. The variables (t,phi) denote geodesic polar coordinate around the axis of
%rotation.

t=zeros(n,n);
phi=zeros(n,n);
vecS=zeros(n,n);
vecTH=zeros(n,n);


%This loop constructs the components of the vector field of rotations
%in the visual space of the eye.  The function InverseSTH determines the
%coordinates of (t,phi) given coordiantes svis and thvis and is necessary to
%calculate the components of the vector field.

for i=1:ntemp
    for j=1:ntemp,
        [t(i,j),phi(i,j)]=InverseSTH(alphabar,beta,R,SV(i,j),THV(i,j));
        
        vecSV(i,j)=-cos(SV(i,j)/R)*cos(beta)*sin(phi(i,j))*cos(THV(i,j)-alphabar)+...
            cos(SV(i,j)/R)*cos(phi(i,j))*(sin(THV(i,j)-alphabar))-...
            sin(SV(i,j)/R)*sin(phi(i,j))*sin(beta);
        
        vecSV(i,j)=R*sin(t(i,j)/R)*vecSV(i,j);
        
        vecTHV(i,j)=(cos(beta)*sin(phi(i,j))*sin(THV(i,j)-alphabar)+...
            cos(phi(i,j))*cos(alphabar-THV(i,j)));
        
        vecTHV(i,j)=R*sin(t(i,j)/R)*vecTHV(i,j);
        vecTHV(i,j)=1/(R*sin(SV(i,j)/R))*vecTHV(i,j);
        
    end
end

%Conversion of the vector fields in visual space to vector fields on the
%retina.

vecS=-2*M/R*vecSV;
vecTH=vecTHV;

%We now push forward this vector onto the flattened retina.

StSec4Data=dlmread('StandardSector4_40');

StRHO=StSec4Data(1:ntemp,1:ntemp);
StF=StSec4Data(1:ntemp,ntemp+1:2*ntemp);
StS=StSec4Data(1:ntemp,2*ntemp+1:3*ntemp);
StTH=StSec4Data(1:ntemp,3*ntemp+1:4*ntemp);

StU=StRHO.*cos(StF);
StV=StRHO.*sin(StF);

%Calcution of derivatives
ds=StS(1,2)-StS(1,1);
DS=DiffX(ntemp)/ds;
StRHOS=(DS*StRHO')';
StFS=(DS*StF')';

dth=StTH(2,1)-StTH(1,1);
DTH=DiffX(ntemp)/dth;
StRHOTH=(DTH*StRHO);
StFTH=(DTH*StF);

StVecU=vecS.*(StRHOS.*cos(StF)-StRHO.*StFS.*sin(StF))+vecTH.*(StRHOTH.*cos(StF)-StRHO.*StFTH.*sin(StF));
StVecV=vecS.*(StRHOS.*sin(StF)+StRHO.*StFS.*cos(StF))+vecTH.*(StRHOTH.*sin(StF)+StRHO.*StFTH.*cos(StF));

temp=(StVecU.^2+StVecV.^2).^(1/2);

StVecU=StVecU./temp;
StVecV=StVecV./temp;

S4=S;
TH4=TH;
StU4=StU;
StV4=StV;
StVecU4=StVecU;
StVecV4=StVecV;
%% Removal of data from curves beyond visual space
% In this code we delete parts of the data on the curves that leave visual
% space. Since we have the data for the s coordinates on the retina we can
% simply check if these values are greater than M=105 degrees.

M=deg2rad(105);


InRange1=sret1<=M;
InRange2=sret2<=M;
InRange3=sret3<=M;
InRange4=sret4<=M;
InRange5=sret5<=M;
InRange6=sret6<=M;
InRange7=sret7<=M;
InRange8=sret8<=M;
InRange9=sret9<=M;
InRange10=sret10<=M;
InRange11=sret11<=M;
InRange12=sret12<=M;
InRange13=sret13<=M;
InRange14=sret14<=M;
InRange15=sret15<=M;
InRange16=sret16<=M;
InRange17=sret17<=M;
InRange18=sret18<=M;
InRange19=sret19<=M;
InRange20=sret20<=M;

C1(1,~InRange1)=NaN;
C2(1,~InRange2)=NaN;
C3(1,~InRange3)=NaN;
C4(1,~InRange4)=NaN;
C5(1,~InRange5)=NaN;
C6(1,~InRange6)=NaN;
C7(1,~InRange7)=NaN;
C8(1,~InRange8)=NaN;
C9(1,~InRange9)=NaN;
C10(1,~InRange10)=NaN;
C11(1,~InRange11)=NaN;
C12(1,~InRange12)=NaN;
C13(1,~InRange13)=NaN;
C14(1,~InRange14)=NaN;
C15(1,~InRange15)=NaN;
C16(1,~InRange16)=NaN;
C17(1,~InRange17)=NaN;
C18(1,~InRange18)=NaN;
C19(1,~InRange19)=NaN;
C20(1,~InRange20)=NaN;

C1ret(1,~InRange1)=NaN;
C2ret(1,~InRange2)=NaN;
C3ret(1,~InRange3)=NaN;
C4ret(1,~InRange4)=NaN;
C5ret(1,~InRange5)=NaN;
C6ret(1,~InRange6)=NaN;
C7ret(1,~InRange7)=NaN;
C8ret(1,~InRange8)=NaN;
C9ret(1,~InRange9)=NaN;
C10ret(1,~InRange10)=NaN;
C11ret(1,~InRange11)=NaN;
C12ret(1,~InRange12)=NaN;
C13ret(1,~InRange13)=NaN;
C14ret(1,~InRange14)=NaN;
C15ret(1,~InRange15)=NaN;
C16ret(1,~InRange16)=NaN;
C17ret(1,~InRange17)=NaN;
C18ret(1,~InRange18)=NaN;
C19ret(1,~InRange19)=NaN;
C20ret(1,~InRange20)=NaN;
%% Construction of curves on flattened retina
% This part of the code creates the curves on the flattened retina. The
% idea is that we simply find the closet point on the discrete mesh to the
% points on the curve.

CF1U=zeros(1,n);
CF1V=zeros(1,n);
CF2U=zeros(1,n);
CF2V=zeros(1,n);
CF3U=zeros(1,n);
CF3V=zeros(1,n);
CF4U=zeros(1,n);
CF4V=zeros(1,n);
CF5U=zeros(1,n);
CF5V=zeros(1,n);
CF6U=zeros(1,n);
CF6V=zeros(1,n);
CF7U=zeros(1,n);
CF7V=zeros(1,n);
CF8U=zeros(1,n);
CF8V=zeros(1,n);

M=deg2rad(105);

for i=1:n
    
    if sret1(i)>M,
        CF1U(i)=NaN;
        CF1V(i)=NaN;
    elseif thret1(i)>=a1 & thret1(i)<a2,
        %Calculation of closest grid point.
        temp=(sret1(i)-M*S1).^2+(thret1(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF1U(i)=StU1(a,b);
        CF1V(i)=StV1(a,b);
    elseif thret1(i)>=a2 & thret1(i)<a3,
        %Calculation of closest grid point.
        temp=(sret1(i)-M*S2).^2+(thret1(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF1U(i)=StU2(a,b);
        CF1V(i)=StV2(a,b);
    elseif thret1(i)>=a3 & thret1(i)<a4,
        %Calculation of closest grid point.
        temp=(sret1(i)-M*S3).^2+(thret1(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF1U(i)=StU3(a,b);
        CF1V(i)=StV3(a,b);
    else
        if thret1(i)<pi/2,
            thret1(i)=thret1(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret1(i)-M*S4).^2+(thret1(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        temp(a,b)
        CF1U(i)=StU4(a,b);
        CF1V(i)=StV4(a,b);
    end
    
    if sret2(i)>M,
        CF2U(i)=NaN;
        CF2V(i)=NaN;
    elseif thret2(i)>=a1 & thret2(i)<a2,
        %Calculation of closest grid point.
        temp=(sret2(i)-M*S2).^2+(thret2(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF2U(i)=StU1(a,b);
        CF2V(i)=StV1(a,b);
    elseif thret2(i)>=a2 & thret2(i)<a3,
        %Calculation of closest grid point.
        temp=(sret2(i)-M*S2).^2+(thret2(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF2U(i)=StU2(a,b);
        CF2V(i)=StV2(a,b);
    elseif thret2(i)>=a3 & thret2(i)<a4,
        %Calculation of closest grid point.
        temp=(sret2(i)-M*S3).^2+(thret2(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF2U(i)=StU3(a,b);
        CF2V(i)=StV3(a,b);
    else
        if thret2(i)<pi/2,
            thret2(i)=thret2(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret2(i)-M*S4).^2+(thret2(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF2U(i)=StU4(a,b);
        CF2V(i)=StV4(a,b);
    end
    
    if sret3(i)>M,
        CF3U(i)=NaN;
        CF3V(i)=NaN;
    elseif thret3(i)>=a1 & thret3(i)<a2,
        %Calculation of closest grid point.
        temp=(sret3(i)-M*S1).^2+(thret3(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF3U(i)=StU1(a,b);
        CF3V(i)=StV1(a,b);
    elseif thret3(i)>=a2 & thret3(i)<a3,
        %Calculation of closest grid point.
        temp=(sret3(i)-M*S2).^2+(thret3(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF3U(i)=StU2(a,b);
        CF3V(i)=StV2(a,b);
    elseif thret3(i)>=a3 & thret3(i)<a4,
        %Calculation of closest grid point.
        temp=(sret3(i)-M*S3).^2+(thret3(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF3U(i)=StU3(a,b);
        CF3V(i)=StV3(a,b);
    else
        if thret3(i)<pi/2,
            thret3(i)=thret3(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret3(i)-M*S4).^2+(thret3(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF3U(i)=StU4(a,b);
        CF3V(i)=StV4(a,b);
    end
    
    if sret4(i)>M,
        CF4U(i)=NaN;
        CF4V(i)=NaN;
    elseif thret4(i)>=a1 & thret4(i)<a2,
        %Calculation of closest grid point.
        temp=(sret4(i)-M*S2).^2+(thret4(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF4U(i)=StU1(a,b);
        CF4V(i)=StV1(a,b);
    elseif thret4(i)>=a2 & thret4(i)<a3,
        %Calculation of closest grid point.
        temp=(sret4(i)-M*S2).^2+(thret4(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF4U(i)=StU2(a,b);
        CF4V(i)=StV2(a,b);
    elseif thret4(i)>=a3 & thret4(i)<a4,
        %Calculation of closest grid point.
        temp=(sret4(i)-M*S3).^2+(thret4(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF4U(i)=StU3(a,b);
        CF4V(i)=StV3(a,b);
    else
        if thret4(i)<pi/2,
            thret4(i)=thret4(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret4(i)-M*S4).^2+(thret4(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF4U(i)=StU4(a,b);
        CF4V(i)=StV4(a,b);
    end
    
    if sret5(i)>M,
        CF5U(i)=NaN;
        CF5V(i)=NaN;
    elseif thret5(i)>=a1 & thret5(i)<a2,
        %Calculation of closest grid point.
        temp=(sret5(i)-M*S1).^2+(thret5(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF5U(i)=StU1(a,b);
        CF5V(i)=StV1(a,b);
    elseif thret5(i)>=a2 & thret5(i)<a3,
        %Calculation of closest grid point.
        temp=(sret5(i)-M*S2).^2+(thret5(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF5U(i)=StU2(a,b);
        CF5V(i)=StV2(a,b);
    elseif thret5(i)>=a3 & thret5(i)<a4,
        %Calculation of closest grid point.
        temp=(sret5(i)-M*S3).^2+(thret5(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF5U(i)=StU3(a,b);
        CF5V(i)=StV3(a,b);
    else
        if thret5(i)<pi/2,
            thret5(i)=thret5(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret5(i)-M*S4).^2+(thret5(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF5U(i)=StU4(a,b);
        CF5V(i)=StV4(a,b);
    end
    
    if sret6(i)>M,
        CF6U(i)=NaN;
        CF6V(i)=NaN;
    elseif thret6(i)>=a1 & thret6(i)<a2,
        %Calculation of closest grid point.
        temp=(sret6(i)-M*S2).^2+(thret6(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF6U(i)=StU1(a,b);
        CF6V(i)=StV1(a,b);
    elseif thret6(i)>=a2 & thret6(i)<a3,
        %Calculation of closest grid point.
        temp=(sret6(i)-M*S2).^2+(thret6(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF6U(i)=StU2(a,b);
        CF6V(i)=StV2(a,b);
    elseif thret6(i)>=a3 & thret6(i)<a4,
        %Calculation of closest grid point.
        temp=(sret6(i)-M*S3).^2+(thret6(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF6U(i)=StU3(a,b);
        CF6V(i)=StV3(a,b);
    else
        if thret6(i)<pi/2,
            thret6(i)=thret6(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret6(i)-M*S4).^2+(thret6(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF6U(i)=StU4(a,b);
        CF6V(i)=StV4(a,b);
    end
    
    if sret7(i)>M,
        CF7U(i)=NaN;
        CF7V(i)=NaN;
    elseif thret7(i)>=a1 & thret7(i)<a2,
        %Calculation of closest grid point.
        temp=(sret7(i)-M*S1).^2+(thret7(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF7U(i)=StU1(a,b);
        CF7V(i)=StV1(a,b);
    elseif thret7(i)>=a2 & thret7(i)<a3,
        %Calculation of closest grid point.
        temp=(sret7(i)-M*S2).^2+(thret7(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF7U(i)=StU2(a,b);
        CF7V(i)=StV2(a,b);
    elseif thret7(i)>=a3 & thret7(i)<a4,
        %Calculation of closest grid point.
        temp=(sret7(i)-M*S3).^2+(thret7(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF7U(i)=StU3(a,b);
        CF7V(i)=StV3(a,b);
    else
        if thret7(i)<pi/2,
            thret7(i)=thret7(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret7(i)-M*S4).^2+(thret7(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF7U(i)=StU4(a,b);
        CF7V(i)=StV4(a,b);
    end
    
    if sret8(i)>M,
        CF8U(i)=NaN;
        CF8V(i)=NaN;
    elseif thret8(i)>=a1 & thret8(i)<a2,
        %Calculation of closest grid point.
        temp=(sret8(i)-M*S2).^2+(thret8(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF8U(i)=StU1(a,b);
        CF8V(i)=StV1(a,b);
    elseif thret8(i)>=a2 & thret8(i)<a3,
        %Calculation of closest grid point.
        temp=(sret8(i)-M*S2).^2+(thret8(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF8U(i)=StU2(a,b);
        CF8V(i)=StV2(a,b);
    elseif thret8(i)>=a3 & thret8(i)<a4,
        %Calculation of closest grid point.
        temp=(sret8(i)-M*S3).^2+(thret8(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF8U(i)=StU3(a,b);
        CF8V(i)=StV3(a,b);
    else
        if thret8(i)<pi/2,
            thret8(i)=thret8(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret8(i)-M*S4).^2+(thret8(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF8U(i)=StU4(a,b);
        CF8V(i)=StV4(a,b);
    end
    
    if sret9(i)>M,
        CF9U(i)=NaN;
        CF9V(i)=NaN;
    elseif thret9(i)>=a1 & thret9(i)<a2,
        %Calculation of closest grid point.
        temp=(sret9(i)-M*S1).^2+(thret9(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF9U(i)=StU1(a,b);
        CF9V(i)=StV1(a,b);
    elseif thret9(i)>=a2 & thret9(i)<a3,
        %Calculation of closest grid point.
        temp=(sret9(i)-M*S2).^2+(thret9(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF9U(i)=StU2(a,b);
        CF9V(i)=StV2(a,b);
    elseif thret9(i)>=a3 & thret9(i)<a4,
        %Calculation of closest grid point.
        temp=(sret9(i)-M*S3).^2+(thret9(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF9U(i)=StU3(a,b);
        CF9V(i)=StV3(a,b);
    else
        if thret9(i)<pi/2,
            thret9(i)=thret9(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret9(i)-M*S4).^2+(thret9(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF9U(i)=StU4(a,b);
        CF9V(i)=StV4(a,b);
    end
    
    if sret10(i)>M,
        CF10U(i)=NaN;
        CF10V(i)=NaN;
    elseif thret10(i)>=a1 & thret10(i)<a2,
        %Calculation of closest grid point.
        temp=(sret10(i)-M*S2).^2+(thret10(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF10U(i)=StU1(a,b);
        CF10V(i)=StV1(a,b);
    elseif thret10(i)>=a2 & thret10(i)<a3,
        %Calculation of closest grid point.
        temp=(sret10(i)-M*S2).^2+(thret10(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF10U(i)=StU2(a,b);
        CF10V(i)=StV2(a,b);
    elseif thret10(i)>=a3 & thret10(i)<a4,
        %Calculation of closest grid point.
        temp=(sret10(i)-M*S3).^2+(thret10(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF10U(i)=StU3(a,b);
        CF10V(i)=StV3(a,b);
    else
        if thret10(i)<pi/2,
            thret10(i)=thret10(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret10(i)-M*S4).^2+(thret10(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF10U(i)=StU4(a,b);
        CF10V(i)=StV4(a,b);
    end
    
    if sret11(i)>M,
        CF11U(i)=NaN;
        CF11V(i)=NaN;
    elseif thret11(i)>=a1 & thret11(i)<a2,
        %Calculation of closest grid point.
        temp=(sret11(i)-M*S1).^2+(thret11(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF11U(i)=StU1(a,b);
        CF11V(i)=StV1(a,b);
    elseif thret11(i)>=a2 & thret11(i)<a3,
        %Calculation of closest grid point.
        temp=(sret11(i)-M*S2).^2+(thret11(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF11U(i)=StU2(a,b);
        CF11V(i)=StV2(a,b);
    elseif thret11(i)>=a3 & thret11(i)<a4,
        %Calculation of closest grid point.
        temp=(sret11(i)-M*S3).^2+(thret11(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF11U(i)=StU3(a,b);
        CF11V(i)=StV3(a,b);
    else
        %Calculation of closest grid point.
        if thret11(i)<pi/2,
            thret11(i)=thret11(i)+2*pi;
        end
        temp=(sret11(i)-M*S4).^2+(thret11(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF11U(i)=StU4(a,b);
        CF11V(i)=StV4(a,b);
    end
    
    if sret12(i)>M,
        CF12U(i)=NaN;
        CF12V(i)=NaN;
    elseif thret12(i)>=a1 & thret12(i)<a2,
        %Calculation of closest grid point.
        temp=(sret12(i)-M*S2).^2+(thret12(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF12U(i)=StU1(a,b);
        CF12V(i)=StV1(a,b);
    elseif thret12(i)>=a2 & thret12(i)<a3,
        %Calculation of closest grid point.
        temp=(sret12(i)-M*S2).^2+(thret12(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF12U(i)=StU2(a,b);
        CF12V(i)=StV2(a,b);
    elseif thret12(i)>=a3 & thret12(i)<a4,
        %Calculation of closest grid point.
        temp=(sret12(i)-M*S3).^2+(thret12(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF12U(i)=StU3(a,b);
        CF12V(i)=StV3(a,b);
    else
        %Calculation of closest grid point.
        if thret12(i)<pi/2,
            thret12(i)=thret12(i)+2*pi;
        end
        temp=(sret12(i)-M*S4).^2+(thret12(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF12U(i)=StU4(a,b);
        CF12V(i)=StV4(a,b);
    end
    
    if sret13(i)>M,
        CF13U(i)=NaN;
        CF13V(i)=NaN;
    elseif thret13(i)>=a1 & thret13(i)<a2,
        %Calculation of closest grid point.
        temp=(sret13(i)-M*S1).^2+(thret13(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF13U(i)=StU1(a,b);
        CF13V(i)=StV1(a,b);
    elseif thret13(i)>=a2 & thret13(i)<a3,
        %Calculation of closest grid point.
        temp=(sret13(i)-M*S2).^2+(thret13(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF13U(i)=StU2(a,b);
        CF13V(i)=StV2(a,b);
    elseif thret13(i)>=a3 & thret13(i)<a4,
        %Calculation of closest grid point.
        temp=(sret13(i)-M*S3).^2+(thret13(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF13U(i)=StU3(a,b);
        CF13V(i)=StV3(a,b);
    else
        %Calculation of closest grid point.
        if thret13(i)<pi/2,
            thret13(i)=thret13(i)+2*pi;
        end
        temp=(sret13(i)-M*S4).^2+(thret13(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF13U(i)=StU4(a,b);
        CF13V(i)=StV4(a,b);
    end
    
    if sret14(i)>M,
        CF14U(i)=NaN;
        CF14V(i)=NaN;
    elseif thret14(i)>=a1 & thret14(i)<a2,
        %Calculation of closest grid point.
        temp=(sret14(i)-M*S2).^2+(thret14(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF14U(i)=StU1(a,b);
        CF14V(i)=StV1(a,b);
    elseif thret14(i)>=a2 & thret14(i)<a3,
        %Calculation of closest grid point.
        temp=(sret14(i)-M*S2).^2+(thret14(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF14U(i)=StU2(a,b);
        CF14V(i)=StV2(a,b);
    elseif thret14(i)>=a3 & thret14(i)<a4,
        %Calculation of closest grid point.
        temp=(sret14(i)-M*S3).^2+(thret14(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF14U(i)=StU3(a,b);
        CF14V(i)=StV3(a,b);
    else
        %Calculation of closest grid point.
        if thret14(i)<pi/2,
            thret14(i)=thret14(i)+2*pi;
        end
        temp=(sret14(i)-M*S4).^2+(thret14(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF14U(i)=StU4(a,b);
        CF14V(i)=StV4(a,b);
    end
    
    if sret15(i)>M,
        CF15U(i)=NaN;
        CF15V(i)=NaN;
    elseif thret15(i)>=a1 & thret15(i)<a2,
        %Calculation of closest grid point.
        temp=(sret15(i)-M*S1).^2+(thret15(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF15U(i)=StU1(a,b);
        CF15V(i)=StV1(a,b);
    elseif thret15(i)>=a2 & thret15(i)<a3,
        %Calculation of closest grid point.
        temp=(sret15(i)-M*S2).^2+(thret15(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF15U(i)=StU2(a,b);
        CF15V(i)=StV2(a,b);
    elseif thret15(i)>=a3 & thret15(i)<a4,
        %Calculation of closest grid point.
        temp=(sret15(i)-M*S3).^2+(thret15(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF15U(i)=StU3(a,b);
        CF15V(i)=StV3(a,b);
    else
        %Calculation of closest grid point.
        if thret15(i)<pi/2,
            thret15(i)=thret15(i)+2*pi;
        end
        temp=(sret15(i)-M*S4).^2+(thret15(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF15U(i)=StU4(a,b);
        CF15V(i)=StV4(a,b);
    end
    
    if sret16(i)>M,
        CF16U(i)=NaN;
        CF16V(i)=NaN;
    elseif thret16(i)>=a1 & thret16(i)<a2,
        %Calculation of closest grid point.
        temp=(sret16(i)-M*S2).^2+(thret16(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF16U(i)=StU1(a,b);
        CF16V(i)=StV1(a,b);
    elseif thret16(i)>=a2 & thret16(i)<a3,
        %Calculation of closest grid point.
        temp=(sret16(i)-M*S2).^2+(thret16(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF16U(i)=StU2(a,b);
        CF16V(i)=StV2(a,b);
    elseif thret16(i)>=a3 & thret16(i)<a4,
        %Calculation of closest grid point.
        temp=(sret16(i)-M*S3).^2+(thret16(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF16U(i)=StU3(a,b);
        CF16V(i)=StV3(a,b);
    else
        %Calculation of closest grid point.
        if thret16(i)<pi/2,
            thret16(i)=thret16(i)+2*pi;
        end
        temp=(sret16(i)-M*S4).^2+(thret16(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        if temp(a,b)>1,
            temp(a,b)
            thret16(i)
        end
        CF16U(i)=StU4(a,b);
        CF16V(i)=StV4(a,b);
        
    end
    
    if sret17(i)>M,
        CF17U(i)=NaN;
        CF17V(i)=NaN;
    elseif thret17(i)>=a1 & thret17(i)<a2,
        %Calculation of closest grid point.
        temp=(sret17(i)-M*S1).^2+(thret17(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF17U(i)=StU1(a,b);
        CF17V(i)=StV1(a,b);
    elseif thret17(i)>=a2 & thret17(i)<a3,
        %Calculation of closest grid point.
        temp=(sret17(i)-M*S2).^2+(thret17(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF17U(i)=StU2(a,b);
        CF17V(i)=StV2(a,b);
    elseif thret17(i)>=a3 & thret17(i)<a4,
        %Calculation of closest grid point.
        temp=(sret17(i)-M*S3).^2+(thret17(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF17U(i)=StU3(a,b);
        CF17V(i)=StV3(a,b);
    else
        if thret17(i)<pi/2,
            thret17(i)=thret17(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret17(i)-M*S4).^2+(thret17(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        temp(a,b)
        CF17U(i)=StU4(a,b);
        CF17V(i)=StV4(a,b);
    end
    
    if sret18(i)>M,
        CF18U(i)=NaN;
        CF18V(i)=NaN;
    elseif thret18(i)>=a1 & thret18(i)<a2,
        %Calculation of closest grid point.
        temp=(sret18(i)-M*S2).^2+(thret18(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF18U(i)=StU1(a,b);
        CF18V(i)=StV1(a,b);
    elseif thret18(i)>=a2 & thret18(i)<a3,
        %Calculation of closest grid point.
        temp=(sret18(i)-M*S2).^2+(thret18(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF18U(i)=StU2(a,b);
        CF18V(i)=StV2(a,b);
    elseif thret18(i)>=a3 & thret18(i)<a4,
        %Calculation of closest grid point.
        temp=(sret18(i)-M*S3).^2+(thret18(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF18U(i)=StU3(a,b);
        CF18V(i)=StV3(a,b);
    else
        if thret18(i)<pi/2,
            thret18(i)=thret18(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret18(i)-M*S4).^2+(thret18(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF18U(i)=StU4(a,b);
        CF18V(i)=StV4(a,b);
    end
    
    if sret19(i)>M,
        CF19U(i)=NaN;
        CF19V(i)=NaN;
    elseif thret19(i)>=a1 & thret19(i)<a2,
        %Calculation of closest grid point.
        temp=(sret19(i)-M*S1).^2+(thret19(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF19U(i)=StU1(a,b);
        CF19V(i)=StV1(a,b);
    elseif thret19(i)>=a2 & thret19(i)<a3,
        %Calculation of closest grid point.
        temp=(sret19(i)-M*S2).^2+(thret19(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF19U(i)=StU2(a,b);
        CF19V(i)=StV2(a,b);
    elseif thret19(i)>=a3 & thret19(i)<a4,
        %Calculation of closest grid point.
        temp=(sret19(i)-M*S3).^2+(thret19(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF19U(i)=StU3(a,b);
        CF19V(i)=StV3(a,b);
    else
        if thret19(i)<pi/2,
            thret19(i)=thret19(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret19(i)-M*S4).^2+(thret19(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF19U(i)=StU4(a,b);
        CF19V(i)=StV4(a,b);
    end
    
    if sret20(i)>M,
        CF20U(i)=NaN;
        CF20V(i)=NaN;
    elseif thret20(i)>=a1 & thret20(i)<a2,
        %Calculation of closest grid point.
        temp=(sret20(i)-M*S2).^2+(thret20(i)-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF20U(i)=StU1(a,b);
        CF20V(i)=StV1(a,b);
    elseif thret20(i)>=a2 & thret20(i)<a3,
        %Calculation of closest grid point.
        temp=(sret20(i)-M*S2).^2+(thret20(i)-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF20U(i)=StU2(a,b);
        CF20V(i)=StV2(a,b);
    elseif thret20(i)>=a3 & thret20(i)<a4,
        %Calculation of closest grid point.
        temp=(sret20(i)-M*S3).^2+(thret20(i)-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF20U(i)=StU3(a,b);
        CF20V(i)=StV3(a,b);
    else
        if thret20(i)<pi/2,
            thret20(i)=thret20(i)+2*pi;
        end
        %Calculation of closest grid point.
        temp=(sret20(i)-M*S4).^2+(thret20(i)-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        CF20U(i)=StU4(a,b);
        CF20V(i)=StV4(a,b);
    end
    
end

%% Vector Fields in Visual Space

% % The bector field in visual space is found by computing the vector field
% % in s-th space and then converting the data to XYZ space.
%
% %Number of points in vector field. This will be a course value so that the
% %resulting vector field on the sphere is not too crowded.
%
% M=80;
%
% t=zeros(M,M);
% phi=zeros(M,M);
% vecS=zeros(M,M);
% vecTH=zeros(M,M);
%
% scourse=linspace(R*pi/2,R*pi,M);
% thcourse=linspace(0,2*pi,M);
%
% [Scourse,THcourse]=meshgrid(scourse,thcourse);
%
% %This loop constructs the components of the vector field of rotations
% %in the the s, th coordinates. The function InverseSTH determines the
% %coordinates of (t,phi) given coordiantes s and th and is necessary to
% %calculate the components of the vector field.
%
% for i=1:M
%     for j=1:M,
%         [t(i,j),phi(i,j)]=InverseSTH(alphabar,beta,R,Scourse(i,j),THcourse(i,j));
%
%         vecSV(i,j)=-cos(Scourse(i,j)/R)*cos(beta)*sin(phi(i,j))*cos(THcourse(i,j)-alphabar)+...
%             cos(Scourse(i,j)/R)*cos(phi(i,j))*(sin(THcourse(i,j)-alphabar))-...
%             sin(Scourse(i,j)/R)*sin(phi(i,j))*sin(beta);
%
%         vecSV(i,j)=R*sin(t(i,j))*vecSV(i,j);
%
%         vecTHV(i,j)=(cos(beta)*sin(phi(i,j))*sin(THcourse(i,j)-alphabar)+...
%             cos(phi(i,j))*cos(alphabar-THcourse(i,j)));
%
%         vecTHV(i,j)=R*sin(t(i,j))*vecTHV(i,j);
%         vecTHV(i,j)=1/(R*sin(Scourse(i,j)/R))*vecTHV(i,j);
%
%     end
% end
%
% X=R*sin(Scourse/R).*cos(THcourse);
% Y=R*sin(Scourse/R).*sin(THcourse);
% Z=-R*cos(Scourse/R);
%
% vecX=vecS.*cos(Scourse/R).*cos(THcourse)-R*vecTH.*sin(Scourse/R).*sin(THcourse);
% vecY=vecS.*cos(Scourse/R).*sin(THcourse)+R*vecTH.*sin(Scourse/R).*cos(THcourse);
% vecZ=vecS.*sin(Scourse/R);
%
% % Normalization of vector field
% veca=vecX./(vecX.^2+vecY.^2+vecZ.^2).^(1/2);
% vecb=vecY./(vecX.^2+vecY.^2+vecZ.^2).^(1/2);
% vecc=vecZ./(vecX.^2+vecY.^2+vecZ.^2).^(1/2);
%
% vecX=veca;
% vecY=vecb;
% vecZ=vecc;
%
%% Creation of Movie in Visual space.

% % Here we create a movie of the rotations in visual space about the given
% % % normal. We simply loop over the numer of frames we want to take. Note,
% % % rate must evenly divide n.
% %
% % rate=10;
% % M=n/rate; %frame rate
% % for i=1:M,
% %     j=i*rate;
% %
% %     close all;
% %     figure('Position',get(0,'ScreenSize'));
% %     hold on;
% %
% %     %Plotting Surface of visual space
% %     s=linspace(pi/2,pi,100);
% %     th=linspace(0,2*pi,100);
% %
% %     [S,TH]=meshgrid(s,th);
% %     surf(R*cos(TH).*sin(S),R*sin(TH).*sin(S),-R*cos(S),'EdgeColor','none');
% %     alpha(.3);
% %
% %     %Plotting Optical singularity
% %     plot3(R*cos(alphabar)*sin(beta),R*sin(alphabar)*sin(beta),-R*cos(beta),'b.','MarkerSize',40);
% %
% %     %Plotting curve in visual space.
% %     plot3(C1(1,:),C1(2,:),C1(3,:),'k','LineWidth',2);
% %     plot3(C2(1,:),C2(2,:),C2(3,:),'k','LineWidth',2);
% %     plot3(C3(1,:),C3(2,:),C3(3,:),'k','LineWidth',2);
% %     plot3(C4(1,:),C4(2,:),C4(3,:),'k','LineWidth',2);
% %     plot3(C5(1,:),C5(2,:),C5(3,:),'k','LineWidth',2);
% %     plot3(C6(1,:),C6(2,:),C6(3,:),'k','LineWidth',2);
% %
% %     %Plotting Representation of mouse eye
% %     s=linspace(0,pi,100);
% %     th=linspace(0,2*pi,100);
% %     [S,TH]=meshgrid(s,th);
% %     surf(R/10*cos(TH).*sin(S),R/10*sin(TH).*sin(S),-R/10*cos(S)-R/10,'FaceColor','green','EdgeColor','none');
% %     axis([-R,R,-R,R,-2*R/10,R]);
% %     alpha(.3);
% %
% %     %Plotting Representation of mouse lens
% %     s=linspace(0,pi,100);
% %     th=linspace(0,2*pi,100);
% %     [S,TH]=meshgrid(s,th);
% %     surf(R/28*cos(TH).*sin(S),R/28*sin(TH).*sin(S),-R/28*cos(S)-R/28,'FaceColor','blue','EdgeColor','none');
% %     alpha(.3);
% %
% %     %Plotting Representation of retina
% %     s=linspace(0,deg2rad(105),100);
% %     th=linspace(0,2*pi,100);
% %     [S,TH]=meshgrid(s,th);
% %     surf((R/12)*cos(TH).*sin(S),(R/12)*sin(TH).*sin(S),-(R/12)*cos(S)-R/10,'FaceColor','red','EdgeColor','none');
% %     alpha(.5);
% %
% %     %Plotting Point on curve in visual space.
% %     plot3(C1(1,j),C1(2,j),C1(3,j),'b.','MarkerSize',40);
% %     plot3(C2(1,j),C2(2,j),C2(3,j),'b.','MarkerSize',40);
% %     plot3(C3(1,j),C3(2,j),C3(3,j),'b.','MarkerSize',40);
% %     plot3(C4(1,j),C4(2,j),C4(3,j),'b.','MarkerSize',40);
% %     plot3(C5(1,j),C5(2,j),C5(3,j),'b.','MarkerSize',40);
% %     plot3(C6(1,j),C6(2,j),C6(3,j),'b.','MarkerSize',40);
% %
% % %     %Plotting Vector Field on the retina
% % %     scale=.5;
% % %     quiver3(X,Y,Z,vecX,vecY,vecZ,scale,'k');
% %
% %     axis square;
% %     axis equal;
% %     view(90,18);
% %     axis off;
% %     set(gcf, 'color', [1 1 1])
% %
% %     %Ploting normal axis
% %     t=linspace(0,3/2*R,100);
% %     plot3(t*Normal(1),t*Normal(2),t*Normal(3),'k','LineWidth',4);
% %
% %     %Plotting line connecting optical singularity on retina to lens
% %     t=linspace(0,1,100)';
% %     betashift=-2*deg2rad(105)/pi*beta+2*deg2rad(105);
% %     alphashift=alphabar+pi;
% %
% %     L(:,1)=t*R/12*cos(alphashift)*sin(betashift);
% %     L(:,2)=t*R/12*sin(alphashift)*sin(betashift);
% %     L(:,3)=t*(-R/12*cos(betashift)-R/10);
% %     plot3(L(:,1),L(:,2),L(:,3),'k','LineWidth',4);
% %
% %     %Plotting Optical Singularity on Retina
% %     plot3(R/12*cos(alphashift)*sin(betashift),R/12*sin(alphashift)*sin(betashift),-R/12*cos(betashift)-R/10,'b.','MarkerSize',30);
% %
% %
% %     F(i)=getframe(gca);
% %     hold off;
% %
% %
% %
% % end
% %
% % movie2avi(F,'RotationSpace.avi');
% %
% % %Use the below compression on a window machine.
% % %movie2avi(F,'RotationSpace.avi','compression','indeo5');
% %
%% Creation of Movie on Retina.

% % % Here we create a movie of the rotations on the retina itself. We simply
% % % loop over the number of frames we want. Note that rate must evenly divide
% % % the total number of frames.
% %
% % rate=10;
% % M=n/rate; %frame rate
% % for i=1:M,
% %     j=i*rate;
% %
% %     close all;
% %     figure('Position',get(0,'ScreenSize'));
% %     hold on;
% %
% %     %Plotting Surface of retina
% %     s=linspace(0,deg2rad(105),100);
% %     th=linspace(0,2*pi,100);
% %     [S,TH]=meshgrid(s,th);
% %     surf(cos(TH).*sin(S),sin(TH).*sin(S),-cos(S),'FaceColor','red','EdgeColor','none');
% %     alpha(.5);
% %
% %     %Plotting Optical singularity on retina
% %     betashift=-2*deg2rad(105)/pi*beta+2*deg2rad(105);
% %     alphashift=alphabar+pi;
% %     plot3(cos(alphashift)*sin(betashift),sin(alphashift)*sin(betashift),-cos(betashift),'b.','MarkerSize',40);
% %
% %
% %     %Plotting curves on retina.
% %
% %     plot3(C1ret(1,:),C1ret(2,:),C1ret(3,:),'k','LineWidth',2);
% %     plot3(C2ret(1,:),C2ret(2,:),C2ret(3,:),'k','LineWidth',2);
% %     plot3(C3ret(1,:),C3ret(2,:),C3ret(3,:),'k','LineWidth',2);
% %     plot3(C4ret(1,:),C4ret(2,:),C4ret(3,:),'k','LineWidth',2);
% %     plot3(C5ret(1,:),C5ret(2,:),C5ret(3,:),'k','LineWidth',2);
% %     plot3(C6ret(1,:),C6ret(2,:),C6ret(3,:),'k','LineWidth',2);
% %
% %     %Plotting Points on curve on the retina.
% %     plot3(C1ret(1,j),C1ret(2,j),C1ret(3,j),'b.','MarkerSize',40);
% %     plot3(C2ret(1,j),C2ret(2,j),C2ret(3,j),'b.','MarkerSize',40);
% %     plot3(C3ret(1,j),C3ret(2,j),C3ret(3,j),'b.','MarkerSize',40);
% %     plot3(C4ret(1,j),C4ret(2,j),C4ret(3,j),'b.','MarkerSize',40);
% %     plot3(C5ret(1,j),C5ret(2,j),C5ret(3,j),'b.','MarkerSize',40);
% %     plot3(C6ret(1,j),C6ret(2,j),C6ret(3,j),'b.','MarkerSize',40);
% %
% %     %     %Plotting Vector Field on the retina
% %     %     scale=.5;
% %     %     quiver3(X,Y,Z,vecX,vecY,vecZ,scale,'k');
% %
% %     axis square;
% %     axis equal;
% %     view(90,18);
% %     axis off;
% %     set(gcf, 'color', [1 1 1])
% %     axis([-1,1,-1,1,-1,1]);
% %
% %     F(i)=getframe(gca);
% %     hold off;
% %
% % end
% %
% % movie2avi(F,'RotationRetina.avi');
% %
% % %Use the below compression on a window machine.
% % %movie2avi(F,'RotationSpace.avi','compression','indeo5');
%
%% Combined Movies
rate=10;
M=n/rate; %frame rate

AnglePar=linspace(0,2*pi,n);

for i=1:M,
    j=i*rate;
    
    close all;
    figure('Position',get(0,'ScreenSize'));
    
    ha=tight_subplot(2,2);
    
    axes(ha(1));
    hold on;
    
    %Plotting Surface of visual space
    s=linspace(pi/2,pi,100);
    th=linspace(0,2*pi,100);
    
    [S,TH]=meshgrid(s,th);
    surf(R*cos(TH).*sin(S),R*sin(TH).*sin(S),-R*cos(S),'EdgeColor','none');
    alpha(.3);
    
    %Plotting Optical singularity
    plot3(R*cos(alphabar)*sin(beta),R*sin(alphabar)*sin(beta),-R*cos(beta),'b.','MarkerSize',40);
    
    %Plotting curve in visual space.
    plot3(C1(1,:),C1(2,:),C1(3,:),'k','LineWidth',2);
    plot3(C2(1,:),C2(2,:),C2(3,:),'k','LineWidth',2);
    plot3(C3(1,:),C3(2,:),C3(3,:),'k','LineWidth',2);
    plot3(C4(1,:),C4(2,:),C4(3,:),'k','LineWidth',2);
    plot3(C5(1,:),C5(2,:),C5(3,:),'k','LineWidth',2);
    plot3(C6(1,:),C6(2,:),C6(3,:),'k','LineWidth',2);
    plot3(C7(1,:),C7(2,:),C7(3,:),'k','LineWidth',2);
    plot3(C8(1,:),C8(2,:),C8(3,:),'k','LineWidth',2);
    plot3(C9(1,:),C9(2,:),C9(3,:),'k','LineWidth',2);
    plot3(C10(1,:),C10(2,:),C10(3,:),'k','LineWidth',2);
    plot3(C11(1,:),C11(2,:),C11(3,:),'k','LineWidth',2);
    plot3(C12(1,:),C12(2,:),C12(3,:),'k','LineWidth',2);
    plot3(C13(1,:),C13(2,:),C13(3,:),'k','LineWidth',2);
    plot3(C14(1,:),C14(2,:),C14(3,:),'k','LineWidth',2);
    plot3(C15(1,:),C15(2,:),C15(3,:),'k','LineWidth',2);
    plot3(C16(1,:),C16(2,:),C16(3,:),'k','LineWidth',2);
    plot3(C17(1,:),C17(2,:),C17(3,:),'k','LineWidth',2);
    plot3(C18(1,:),C18(2,:),C18(3,:),'k','LineWidth',2);
    plot3(C19(1,:),C19(2,:),C19(3,:),'k','LineWidth',2);
    plot3(C20(1,:),C20(2,:),C20(3,:),'k','LineWidth',2);
    
    %Plotting Representation of mouse eye
    s=linspace(0,pi,100);
    th=linspace(0,2*pi,100);
    [S,TH]=meshgrid(s,th);
    surf(R/10*cos(TH).*sin(S),R/10*sin(TH).*sin(S),-R/10*cos(S)-R/10,'FaceColor','green','EdgeColor','none');
    axis([-R,R,-R,R,-2*R/10,R]);
    alpha(.3);
    camlight left;
    lighting phong;
    
    %Plotting Representation of mouse lens
    s=linspace(0,pi,100);
    th=linspace(0,2*pi,100);
    [S,TH]=meshgrid(s,th);
    surf(R/28*cos(TH).*sin(S),R/28*sin(TH).*sin(S),-R/28*cos(S)-R/28,'FaceColor','blue','EdgeColor','none');
    alpha(.3);
    
    %Plotting Representation of retina
    s=linspace(0,deg2rad(105),100);
    th=linspace(0,2*pi,100);
    [S,TH]=meshgrid(s,th);
    surf((R/12)*cos(TH).*sin(S),(R/12)*sin(TH).*sin(S),-(R/12)*cos(S)-R/10,'FaceColor','red','EdgeColor','none');
    alpha(.5);
    
    %Plotting Point on curve in visual space.
    plot3(C1(1,j),C1(2,j),C1(3,j),'b.','MarkerSize',40);
    plot3(C2(1,j),C2(2,j),C2(3,j),'b.','MarkerSize',40);
    plot3(C3(1,j),C3(2,j),C3(3,j),'b.','MarkerSize',40);
    plot3(C4(1,j),C4(2,j),C4(3,j),'b.','MarkerSize',40);
    plot3(C5(1,j),C5(2,j),C5(3,j),'b.','MarkerSize',40);
    plot3(C6(1,j),C6(2,j),C6(3,j),'b.','MarkerSize',40);
    plot3(C7(1,j),C7(2,j),C7(3,j),'b.','MarkerSize',40);
    plot3(C8(1,j),C8(2,j),C8(3,j),'b.','MarkerSize',40);
    plot3(C9(1,j),C9(2,j),C9(3,j),'b.','MarkerSize',40);
    plot3(C10(1,j),C10(2,j),C10(3,j),'b.','MarkerSize',40);
    plot3(C11(1,j),C11(2,j),C11(3,j),'b.','MarkerSize',40);
    plot3(C12(1,j),C12(2,j),C12(3,j),'b.','MarkerSize',40);
    plot3(C13(1,j),C13(2,j),C13(3,j),'b.','MarkerSize',40);
    plot3(C14(1,j),C14(2,j),C14(3,j),'b.','MarkerSize',40);
    plot3(C15(1,j),C15(2,j),C15(3,j),'b.','MarkerSize',40);
    plot3(C16(1,j),C16(2,j),C16(3,j),'b.','MarkerSize',40);
    plot3(C17(1,j),C17(2,j),C17(3,j),'b.','MarkerSize',40);
    plot3(C18(1,j),C18(2,j),C18(3,j),'b.','MarkerSize',40);
    plot3(C19(1,j),C19(2,j),C19(3,j),'b.','MarkerSize',40);
    plot3(C20(1,j),C20(2,j),C20(3,j),'b.','MarkerSize',40);
    
    %     %Plotting Vector Field on the retina
    %     scale=.5;
    %     quiver3(X,Y,Z,vecX,vecY,vecZ,scale,'k');
    
    %axis square;
    axis equal;
    view(90,18);
    axis off;
    set(gcf, 'color', [1 1 1])
    
    %Ploting normal axis
    t=linspace(0,3/2*R,100);
    plot3(t*Normal(1),t*Normal(2),t*Normal(3),'k','LineWidth',4);
    
    %Plotting perpindicular axis
%     Vector=cross(Normal,[-cos(AnglePar(j)),sin(AnglePar(j)),0]');
%     plot3(t*Vector(1),t*Vector(2),t*Vector(3),'k','LineWidth',4);
    
    
    %Plotting line connecting optical singularity on retina to lens
    t=linspace(0,1,100)';
    betashift=-2*deg2rad(105)/pi*beta+2*deg2rad(105);
    alphashift=alphabar+pi;
    
    L(:,1)=t*R/12*cos(alphashift)*sin(betashift);
    L(:,2)=t*R/12*sin(alphashift)*sin(betashift);
    L(:,3)=t*(-R/12*cos(betashift)-R/10);
    plot3(L(:,1),L(:,2),L(:,3),'k','LineWidth',4);
    
    %Plotting Optical Singularity on Retina
    plot3(R/12*cos(alphashift)*sin(betashift),R/12*sin(alphashift)*sin(betashift),-R/12*cos(betashift)-R/10,'b.','MarkerSize',30);
    
    
    hold off;
    
    axes(ha(2));
    hold on;
    %Plotting Surface of retina
    s=linspace(0,deg2rad(105),100);
    th=linspace(0,2*pi,100);
    [S,TH]=meshgrid(s,th);
    surf(cos(TH).*sin(S),sin(TH).*sin(S),-cos(S),'FaceColor','red','EdgeColor','none');
    alpha(.5);
    camlight left;
    lighting phong;
    
    %Plotting Optical singularity on retina
    betashift=-2*deg2rad(105)/pi*beta+2*deg2rad(105);
    alphashift=alphabar+pi;
    plot3(cos(alphashift)*sin(betashift),sin(alphashift)*sin(betashift),-cos(betashift),'b.','MarkerSize',40);
    
    
    %Plotting curves on retina.
    
    plot3(C1ret(1,:),C1ret(2,:),C1ret(3,:),'k','LineWidth',2);
    plot3(C2ret(1,:),C2ret(2,:),C2ret(3,:),'k','LineWidth',2);
    plot3(C3ret(1,:),C3ret(2,:),C3ret(3,:),'k','LineWidth',2);
    plot3(C4ret(1,:),C4ret(2,:),C4ret(3,:),'k','LineWidth',2);
    plot3(C5ret(1,:),C5ret(2,:),C5ret(3,:),'k','LineWidth',2);
    plot3(C6ret(1,:),C6ret(2,:),C6ret(3,:),'k','LineWidth',2);
    plot3(C7ret(1,:),C7ret(2,:),C7ret(3,:),'k','LineWidth',2);
    plot3(C8ret(1,:),C8ret(2,:),C8ret(3,:),'k','LineWidth',2);
    plot3(C9ret(1,:),C9ret(2,:),C9ret(3,:),'k','LineWidth',2);
    plot3(C10ret(1,:),C10ret(2,:),C10ret(3,:),'k','LineWidth',2);
    plot3(C11ret(1,:),C11ret(2,:),C11ret(3,:),'k','LineWidth',2);
    plot3(C12ret(1,:),C12ret(2,:),C12ret(3,:),'k','LineWidth',2);
    plot3(C13ret(1,:),C13ret(2,:),C13ret(3,:),'k','LineWidth',2);
    plot3(C14ret(1,:),C14ret(2,:),C14ret(3,:),'k','LineWidth',2);
    plot3(C15ret(1,:),C15ret(2,:),C15ret(3,:),'k','LineWidth',2);
    plot3(C16ret(1,:),C16ret(2,:),C16ret(3,:),'k','LineWidth',2);
    plot3(C17ret(1,:),C17ret(2,:),C17ret(3,:),'k','LineWidth',2);
    plot3(C18ret(1,:),C18ret(2,:),C18ret(3,:),'k','LineWidth',2);
    plot3(C19ret(1,:),C19ret(2,:),C19ret(3,:),'k','LineWidth',2);
    plot3(C20ret(1,:),C20ret(2,:),C20ret(3,:),'k','LineWidth',2);
    
    %Plotting Points on curve on the retina.
    plot3(C1ret(1,j),C1ret(2,j),C1ret(3,j),'b.','MarkerSize',40);
    plot3(C2ret(1,j),C2ret(2,j),C2ret(3,j),'b.','MarkerSize',40);
    plot3(C3ret(1,j),C3ret(2,j),C3ret(3,j),'b.','MarkerSize',40);
    plot3(C4ret(1,j),C4ret(2,j),C4ret(3,j),'b.','MarkerSize',40);
    plot3(C5ret(1,j),C5ret(2,j),C5ret(3,j),'b.','MarkerSize',40);
    plot3(C6ret(1,j),C6ret(2,j),C6ret(3,j),'b.','MarkerSize',40);
    plot3(C7ret(1,j),C7ret(2,j),C7ret(3,j),'b.','MarkerSize',40);
    plot3(C8ret(1,j),C8ret(2,j),C8ret(3,j),'b.','MarkerSize',40);
    plot3(C9ret(1,j),C9ret(2,j),C9ret(3,j),'b.','MarkerSize',40);
    plot3(C10ret(1,j),C10ret(2,j),C10ret(3,j),'b.','MarkerSize',40);
    plot3(C11ret(1,j),C11ret(2,j),C11ret(3,j),'b.','MarkerSize',40);
    plot3(C12ret(1,j),C12ret(2,j),C12ret(3,j),'b.','MarkerSize',40);
    plot3(C13ret(1,j),C13ret(2,j),C13ret(3,j),'b.','MarkerSize',40);
    plot3(C14ret(1,j),C14ret(2,j),C14ret(3,j),'b.','MarkerSize',40);
    plot3(C15ret(1,j),C15ret(2,j),C15ret(3,j),'b.','MarkerSize',40);
    plot3(C16ret(1,j),C16ret(2,j),C16ret(3,j),'b.','MarkerSize',40);
    plot3(C17ret(1,j),C17ret(2,j),C17ret(3,j),'b.','MarkerSize',40);
    plot3(C18ret(1,j),C18ret(2,j),C18ret(3,j),'b.','MarkerSize',40);
    plot3(C19ret(1,j),C19ret(2,j),C19ret(3,j),'b.','MarkerSize',40);
    plot3(C20ret(1,j),C20ret(2,j),C20ret(3,j),'b.','MarkerSize',40);
    
    %axis square;
    axis equal;
    view(90,18);
    axis off;
    set(gcf, 'color', [1 1 1])
    axis([-1,1,-1,1,-1,1/2]);
    
    hold off;
    
    %Plotting Curves on flattened retina
    axes(ha(3));
    
    hold on;
    plot(CF1U,CF1V,'k','LineWidth',2);
    plot(CF2U,CF2V,'k','LineWidth',2);
    plot(CF3U,CF3V,'k','LineWidth',2);
    plot(CF4U,CF4V,'k','LineWidth',2);
    plot(CF5U,CF5V,'k','LineWidth',2);
    plot(CF6U,CF6V,'k','LineWidth',2);
    plot(CF7U,CF7V,'k','LineWidth',2);
    plot(CF8U,CF8V,'k','LineWidth',2);
    plot(CF9U,CF9V,'k','LineWidth',2);
    plot(CF10U,CF10V,'k','LineWidth',2);
    plot(CF11U,CF11V,'k','LineWidth',2);
    plot(CF12U,CF12V,'k','LineWidth',2);
    plot(CF13U,CF13V,'k','LineWidth',2);
    plot(CF14U,CF14V,'k','LineWidth',2);
    plot(CF15U,CF15V,'k','LineWidth',2);
    plot(CF16U,CF16V,'k','LineWidth',2);
    plot(CF17U,CF17V,'k','LineWidth',2);
    plot(CF18U,CF18V,'k','LineWidth',2);
    plot(CF19U,CF19V,'k','LineWidth',2);
    plot(CF20U,CF20V,'k','LineWidth',2);
    
    
    %Plotting Points on flattened retina
    plot(CF1U(j),CF1V(j),'b.','MarkerSize',40);
    plot(CF2U(j),CF2V(j),'b.','MarkerSize',40);
    plot(CF3U(j),CF3V(j),'b.','MarkerSize',40);
    plot(CF4U(j),CF4V(j),'b.','MarkerSize',40);
    plot(CF5U(j),CF5V(j),'b.','MarkerSize',40);
    plot(CF6U(j),CF6V(j),'b.','MarkerSize',40);
    plot(CF7U(j),CF7V(j),'b.','MarkerSize',40);
    plot(CF8U(j),CF8V(j),'b.','MarkerSize',40);
    plot(CF9U(j),CF9V(j),'b.','MarkerSize',40);
    plot(CF10U(j),CF10V(j),'b.','MarkerSize',40);
    plot(CF11U(j),CF11V(j),'b.','MarkerSize',40);
    plot(CF12U(j),CF12V(j),'b.','MarkerSize',40);
    plot(CF13U(j),CF13V(j),'b.','MarkerSize',40);
    plot(CF14U(j),CF14V(j),'b.','MarkerSize',40);
    plot(CF15U(j),CF15V(j),'b.','MarkerSize',40);
    plot(CF16U(j),CF16V(j),'b.','MarkerSize',40);
    plot(CF17U(j),CF17V(j),'b.','MarkerSize',40);
    plot(CF18U(j),CF18V(j),'b.','MarkerSize',40);
    plot(CF19U(j),CF19V(j),'b.','MarkerSize',40);
    plot(CF20U(j),CF20V(j),'b.','MarkerSize',40);
    
    %Plotting Flattened Retina
    surf(StU1,StV1,zeros(ntemp,ntemp),'FaceColor','red','EdgeColor','none');
    surf(StU2,StV2,zeros(ntemp,ntemp),'FaceColor','red','EdgeColor','none');
    surf(StU3,StV3,zeros(ntemp,ntemp),'FaceColor','red','EdgeColor','none');
    surf(StU4,StV4,zeros(ntemp,ntemp),'FaceColor','red','EdgeColor','none');
    
    M=deg2rad(105);
    
    %Plotting optical singularity on flattened retina
    if alphashift>=a1 & alphashift<a2,
        %Calculation of closest grid point.
        temp=(betashift-M*S1).^2+(alphashift-TH1).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        USing=StU1(a,b);
        VSing=StV1(a,b);
        
    elseif alphashift>=a2 & alphashift<a3,
        %Calculation of closest grid point.
        temp=(betashift-M*S2).^2+(alphashift-TH2).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        USing=StU2(a,b);
        VSing=StV2(a,b);
    elseif alphashift>=a3 & alphashift<a4,
        %Calculation of closest grid point.
        temp=(betashift-M*S3).^2+(alphashift-TH3).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        USing=StU3(a,b);
        VSing=StV3(a,b);
    else
        if alphashift<pi/2,
            alphashift=alphashift+2*pi;
        end
        %Calculation of closest grid point.
        temp=(betashift-M*S4).^2+(alphashift-TH4).^2;
        [ind1,ind2] =find(temp==min(min(temp)));
        a=ind1(1);
        b=ind2(1);
        
        temp(a,b)
        USing=StU4(a,b);
        VSing=StV4(a,b);
    end
    
    plot(USing,VSing,'b.','MarkerSize',40);
    alpha(.25);
    
    axis off;
    
    hold off;
    
    %Plotting Vector Fields on flattened retina
    axes(ha(4));
    
    hold on;
    scale=.5;
    quiver(StU1,StV1,StVecU1,StVecV1,scale,'r');
    quiver(StU2,StV2,StVecU2,StVecV2,scale,'r');
    quiver(StU3,StV3,StVecU3,StVecV3,scale,'r');
    quiver(StU4,StV4,StVecU4,StVecV4,scale,'r');
    axis([-1,1,-1,1]);
    
    %axis square;
    axis off;
    
    hold off;
    
    F(i)=getframe(gcf);
    
    %axis square;
    
end

movie2avi(F,'RotationCombined.avi','quality',100);
movie2avi(F,'RotationCombined_lowRes.avi','quality',75);

%movie2avi(F,'RotationCombined.avi');


end

